version: '3.7'

services:
  web-server:
    image: "bberthelet/web_server_image:${tag}"
    ports:
      - "8080:80"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == web_server
    networks:
      day_trade_net:
        aliases:
          - web_server
      
  audit-server:
    image: "bberthelet/audit_server_image:${tag}"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == audit_server
    networks:
      day_trade_net:
        aliases:
          - audit_server
      
  add-service:
    image: "bberthelet/add_service_image:${tag}"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == transaction_server
    networks:
      day_trade_net:
        aliases:
          - add_service
      
  buy-service:
    image: "bberthelet/buy_service_image:${tag}"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == transaction_server
    networks:
      day_trade_net:
        aliases:
          - buy_service
      
  buy-trigger-service:
    image: "bberthelet/buy_trigger_service_image:${tag}"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == transaction_server
    networks:
      day_trade_net:
        aliases:
          - buy_trigger_service
      
  display-summary-service:
    image: "bberthelet/display_summary_service_image:${tag}"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == transaction_server
    networks:
      day_trade_net:
        aliases:
          - display_summary_service
      
  quote-service:
    image: "bberthelet/quote_service_image:${tag}"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == transaction_server
    networks:
      day_trade_net:
        aliases:
          - quote_service
      
  sell-service:
    image: "bberthelet/sell_service_image:${tag}"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == transaction_server
    networks:
      day_trade_net:
        aliases:
          - sell_service
      
  sell-trigger-service:
    image: "bberthelet/sell_trigger_service_image:${tag}"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == transaction_server
    networks:
      day_trade_net:
        aliases:
          - sell_trigger_service
    
  db:
    image: mysql/mysql-server:8.0.17
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == database_server
    environment:
      MYSQL_DATABASE: db
      # So you don't have to use root, but you can if you like
      MYSQL_USER: user
      # You can use whatever password you like
      MYSQL_PASSWORD: password
      # Password for root access
      MYSQL_ROOT_PASSWORD: password
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - "3306:3306"
      # Where our data will be persisted
    volumes:
      - ./data/init:/docker-entrypoint-initdb.d
    networks:
      day_trade_net:
        aliases:
          - databaseserver_db_1
        
  quote-server:
    image: bberthelet/quote_server_image:latest
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == transaction_server
    networks:
      day_trade_net:
        aliases:
          - quoteserve.seng.uvic.ca      

networks:
  day_trade_net:
    ipam:
      config:
        - subnet: 172.2.0.0/16